plugins {
	id 'java'
	id 'org.springframework.boot' version '3.1.5'
	id 'io.spring.dependency-management' version '1.1.3'
	id 'jacoco'
}

group = 'es.in2.wallet'
version = '0.0.1-SNAPSHOT'

java {
	sourceCompatibility = '17'
}

jacoco {
	toolVersion = "0.8.9"
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	// Validation
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'

	//keycloak
	implementation('jakarta.transaction:jakarta.transaction-api:2.0.0')
	implementation("org.keycloak:keycloak-admin-client:22.0.5")


	// Documentation
	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.0.4'

	// Test
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'io.projectreactor:reactor-test'
	testImplementation 'org.powermock:powermock-api-mockito2:2.0.9'
	testImplementation 'org.powermock:powermock-module-junit4:2.0.9'
}
tasks.named('test') {
	useJUnitPlatform()
}

tasks.jacocoTestReport {
	dependsOn test
	reports {
		xml.required.set(true)
		csv.required.set(false)
		html.outputLocation.set(layout.buildDirectory.dir("jacocoHtml"))
	}
	afterEvaluate {
		classDirectories.setFrom(files(classDirectories.files.collect {
			fileTree(dir: it, exclude: [
					'**/UserRegistryApplication.class',
					'**/api/util',
			])
		}))
	}
}

tasks.named('test') {
	finalizedBy jacocoTestReport
}
