name: Build and Deploy (Prod Environment)

on:
  pull_request:
    branches: [ "main" ]

jobs:

  analyze:
    name: analyze
    runs-on: ${{ (matrix.language == 'swift' && 'macos-latest') || 'ubuntu-latest' }}
    timeout-minutes: ${{ (matrix.language == 'swift' && 120) || 360 }}
    permissions:
      actions: read
      contents: read
      security-events: write

    strategy:
      fail-fast: false
      matrix:
        language: [ 'java-kotlin' ]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v2
        with:
          languages: ${{ matrix.language }}

      - name: Autobuild
        uses: github/codeql-action/autobuild@v2

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2
        with:
          category: "/language:${{matrix.language}}"

  build:
    name: build-project
    if: success()
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          distribution: 'adopt'
          java-version: '17'

      - name: Make Gradlew Executable
        run: chmod +x ./gradlew

      - name: Build Project
        run: ./gradlew build

  sonarcloud:
    name: sonarcloud
    needs: build
    if: success()
    runs-on: ubuntu-latest
    permissions:
      pull-requests: read
    environment: prod

    steps:
      - name: Analyze with SonarCloud
        uses: SonarSource/sonarcloud-github-action@de2e56b42aa84d0b1c5b622644ac17e505c9a049
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          args:
            -Dsonar.projectKey=in2workspace_wallet-user-registry
            -Dsonar.organization=in2workspace
            -Dsonar.coverage.jacoco.xmlReportPaths=build/reports/jacoco/test/jacocoTestReport.xml

  deploy:
    name: deploy-project
    needs: build
    if: success()
    runs-on: ubuntu-latest
    environment: prod

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          distribution: 'adopt'
          java-version: '17'

      - name: Make Gradlew Executable
        run: chmod +x ./gradlew

      - name: Build and Push docker image
        run: |
          ./gradlew printVersion
          ./gradlew printProjectName
          VERSION=$(./gradlew -q printVersion)
          PROJECT_NAME=$(./gradlew -q printProjectName)
          IMAGE_TAG="$PROJECT_NAME:v$VERSION"
          docker build . --file Dockerfile --tag $DOCKER_HUB_CLIENT_NAME/$IMAGE_TAG
          echo $DOCKER_PASSWORD | docker login -u $DOCKER_USERNAME --password-stdin
          docker push $DOCKER_HUB_CLIENT_NAME/$IMAGE_TAG
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
          DOCKER_HUB_CLIENT_NAME: ${{ secrets.DOCKER_HUB_CLIENT_NAME }}
